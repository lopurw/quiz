const questions =[
    {
        question: "Что такое абстрактный класс в C#?",
        answer: "Класс, который не может быть создан в экземплярах и может содержать абстрактные методы.",
        options: [
            "Класс с большим количеством абстракций",
            "Класс, который не имеет методов",
            "Класс, который не может быть создан в экземплярах и может содержать абстрактные методы.",
            "Ключевое слово для создания нового интерфейса",
            "Структура данных для хранения информации"
        ]
    },
    {
        question: "Что такое LINQ в C#?",
        answer: "Language-Integrated Query - набор средств для работы с данными.",
        options: [
            "LINQ - язык программирования",
            "Сокращение от 'LINK'",
            "Язык запросов к базам данных",
            "Language-Integrated Query - набор средств для работы с данными.",
            "Название нового языка программирования"
        ]
    },
    {
        question: "Как объявить строку в C#?",
        answer: "string myString = \"Hello, World!\";",
        options: [
            "string myString = 'Hello, World!';",
            "var myString = 'Hello, World!';",
            "string myString = \"Hello, World!\";",
            "char myString = 'Hello, World!';",
            "String myString = \"Hello, World!\";"
        ]
    },
    {
        question: "Что такое делегат в C#?",
        answer: "Тип данных, который представляет собой ссылку на метод.",
        options: [
            "Объект для работы с файлами",
            "Структура данных для хранения информации",
            "Тип данных, который представляет собой ссылку на метод.",
            "Ключевое слово для создания цикла",
            "Специальный вид оператора"
        ]
    },
    {
        question: "Какие виды доступа к членам класса существуют в C#?",
        answer: "public, private, protected, internal, protected internal.",
        options: [
            "open, close, read, write",
            "inside, outside",
            "public, private, protected, internal, protected internal.",
            "start, stop, pause, resume",
            "visible, invisible"
        ]
    },
    {
        question: "Что такое пространство имен (namespace) в C#?",
        answer: "Способ группировки логически связанных классов и типов данных.",
        options: [
            "Функция для обработки строк",
            "Структура данных для хранения информации",
            "Способ группировки логически связанных классов и типов данных.",
            "Ключевое слово для создания нового объекта",
            "Инструкция для сортировки данных"
        ]
    },
    {
        question: "Как объявить перечисление (enum) в C#?",
        answer: "enum MyEnum { Value1, Value2, Value3 };",
        options: [
            "enum MyEnum = { Value1, Value2, Value3 };",
            "var MyEnum = { Value1, Value2, Value3 };",
            "enum MyEnum { Value1, Value2, Value3 };",
            "enum MyEnum: int { Value1, Value2, Value3 };",
            "int MyEnum = { Value1, Value2, Value3 };"
        ]
    },
    {
        question: "Что такое исключение (exception) в C#?",
        answer: "Объект, представляющий ошибку во время выполнения программы.",
        options: [
            "Оператор для сравнения объектов",
            "Специальный вид оператора",
            "Объект, представляющий ошибку во время выполнения программы.",
            "Ключевое слово для создания нового класса",
            "Метод для сортировки массива"
        ]
    },
    {
        question: "Какой модификатор доступа указывает, что член класса виден только внутри текущей сборки (assembly) в C#?",
        answer: "internal",
        options: [
            "private",
            "protected",
            "public",
            "internal",
            "static"
        ]
    },
    {
        question: "Каким образом можно обработать исключение в C#?",
        answer: "С использованием блока 'try-catch'.",
        options: [
            "Используя оператор 'if'",
            "С использованием блока 'loop'",
            "С использованием блока 'try-catch'.",
            "Используя ключевое слово 'exception'",
            "С помощью оператора 'switch'"
        ]
    },
    {
        question: "Что такое атрибут (attribute) в C#?",
        answer: "Метаданные, предоставляющие информацию о коде.",
        options: [
            "Ключевое слово для создания нового класса",
            "Объект для работы с базой данных",
            "Специальный вид оператора",
            "Метаданные, предоставляющие информацию о коде.",
            "Модификатор доступа"
        ]
    },
    {
        question: "Каким образом можно управлять сборкой мусора в C#?",
        answer: "Система автоматической сборки мусора управляет освобождением памяти.",
        options: [
            "С помощью ключевого слова 'garbage'",
            "Вручную освобождать память после использования",
            "Система автоматической сборки мусора управляет освобождением памяти.",
            "Используя метод FreeMemory()",
            "С помощью цикла 'for'"
        ]
    },
    {
        question: "Какие типы данных относятся к значимым (value types) в C#?",
        answer: "int, float, double, struct, enum.",
        options: [
            "string, array, class, object, dynamic",
            "bool, char, decimal, object, void",
            "int, float, double, struct, enum.",
            "List, Dictionary, HashSet, LinkedList, Queue",
            "try, catch, finally, throw, using"
        ]
    },
    {
        question: "Что такое перегрузка методов (method overloading) в C#?",
        answer: "Возможность иметь несколько методов с одним и тем же именем в классе, но с разными параметрами.",
        options: [
            "Процесс изменения типа переменных в методе",
            "Особая разновидность методов",
            "Метод с самым большим числом параметров",
            "Возможность иметь несколько методов с одним и тем же именем в классе, но с разными параметрами.",
            "Техника управления памятью"
        ]
    },
    {
        question: "Как создать объект класса в C#?",
        answer: "MyClass myObject = new MyClass();",
        options: [
            "object myObject = MyClass();",
            "MyClass myObject = create MyClass();",
            "MyClass myObject = new Object(MyClass);",
            "MyClass myObject = new MyClass();",
            "create new Object(MyClass);"
        ]
    },
    {
        question: "Что такое атрибут (attribute) в C#?",
        answer: "Метаданные, предоставляющие информацию о коде.",
        options: [
            "Ключевое слово для создания нового класса",
            "Объект для работы с базой данных",
            "Специальный вид оператора",
            "Метаданные, предоставляющие информацию о коде.",
            "Модификатор доступа"
        ]
    },
    {
        question: "Каким образом можно управлять сборкой мусора в C#?",
        answer: "Система автоматической сборки мусора управляет освобождением памяти.",
        options: [
            "С помощью ключевого слова 'garbage'",
            "Вручную освобождать память после использования",
            "Система автоматической сборки мусора управляет освобождением памяти.",
            "Используя метод FreeMemory()",
            "С помощью цикла 'for'"
        ]
    },
];